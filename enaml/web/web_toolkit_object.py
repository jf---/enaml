#------------------------------------------------------------------------------
# Copyright (c) 2014, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
import uuid

from atom.api import Constant

from enaml.widgets.toolkit_object import ProxyToolkitObject

from .web_application import WebApplication


class WebToolkitObject(ProxyToolkitObject):
    """ A web implementation of an Enaml ProxyToolkitObject.

    """
    #: The globally unique identifier for this toolkit object. This
    #: is used to route messages between client and server objects.
    object_id = Constant(factory=lambda: unicode(uuid.uuid4().hex))

    def process_message(self, message):
        """ The primary message handler for the toolkit object.

        This handle will dispatch to a mangled-name method of the form
        'on_message_{type}' where {type} is replaced with the value of
        the key 'type' in the message dict.

        Handlers should assume that message is correctly formatted. Any
        exceptions will be caught and logged by the calling function.

        Parameters
        ----------
        message : dict
            The message passed to this object from the client.

        """
        name = u'on_message_%s' % message[u'type']
        handler = getattr(self, name, None)
        if handler is None:
            handler = self.default_handler
        handler(message)

    def send_message(self, message):
        """ Send a message to the client side object.

        The 'object_id' will be added to the message automatically.

        Parameters
        ----------
        message : dict
            The message to pass to the client object.

        """
        message[u'object_id'] = self.object_id
        WebApplication.send_message(message)

    def initial_state(self):
        """ Get the initial state for the toolkit object.

        This method should be subclassed as needed to add to or modify
        the initial state generated by the superclass.

        Returns
        -------
        result : dict
            The initial state dict for the toolkit object.

        """
        state = {}
        state[u'object_id'] = self.object_id
        state[u'children'] = [child.object_id for child in self.children()]
        return state

    def default_handler(self, message):
        """ The default message handler.

        This method will be invoked if no handler is found for the
        given message. The default behavior raises a RuntimeError.

        """
        raise RuntimeError('unhandled message: %s' % message)
